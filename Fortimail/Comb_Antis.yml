- name: Manage Antispam Profile in Recipient Policy
  hosts: fortimail1
  gather_facts: no
  vars:
    domain: "site1.com"
    recipient_policy_id: 1
    antispam_profile_name: "Antispam1"
    operation: "associate" 

  tasks:
    - name: Login to FortiMail and get session cookie
      uri:
        url: "https://{{ fortimail_ip }}/api/v1/AdminLogin"
        method: POST
        headers:
          Content-Type: application/json
        body:
          name: "{{ fortimail_username }}"
          password: "{{ fortimail_password }}"
        body_format: json
        validate_certs: no
        return_content: yes
        status_code: 200
      register: login_response

    - name: Extract session cookie string
      set_fact:
        fm_cookie_string: "{{ login_response.cookies_string }}"
    - name: Crate rofil antispam 
      uri:
        url: "https://{{ fortimail_ip }}/api/v1/domain/site1.com/ProfAntispam/{{ antispam_profile_name }}"
        method: POST
        headers:
          Cookie: "{{ fm_cookie_string }}"
          Content-Type: application/json
        body_format: json
        body:
          name: "{{ antispam_profile_name }}"
          comments: "Profil créé automatiquement"
        validate_certs: no
        status_code: 200
      when: operation == "add"

    - name: Update the antispam profile 
      uri:
        url: "https://{{ fortimail_ip }}/api/v1/domain/{{ domain }}/ProfAntispam/{{ antispam_profile_name }}"
        method: PUT
        headers:
          Cookie: "{{ fm_cookie_string }}"
          Content-Type: application/json
        body:
          bannedword: true
          spf_checking: true
          spf_pass_status: true
          spf_fail_status: true
          spf_neutral_status: true
          spf_none_status: true
          spf_perm_error_status: true
          spf_sender_alignment_status: true
          spf_soft_fail_status: true
          spf_temp_error_status: true
          action_spf_pass: "pass"
          action_spf_soft_fail: "UserQuarantine"
          action_dkim: "pass"
          action_dkim_none: "UserQuarantine"
          action_dkim_pass: "pass"
          action_dkim_temp_error: "UserQuarantine"
          action_dmarc: "pass"
          action_dmarc_none: "UserQuarantine"
          action_dmarc_pass: "pass"
          action_dmarc_temp_error: "UserQuarantine"
          action_spf_fail: "UserQuarantine"
          action_spf_neutral: "UserQuarantine"
          action_spf_none: "UserQuarantine"
          action_spf_perm_error: "UserQuarantine"
          action_spf_sender_alignment: "pass"
          action_spf_temp_error: "UserQuarantine"
          dkim_fail_status: true
          dkim_none_status: true
          dkim_pass_status: true
          dkim_status: true
          dkim_temp_error_status: true
          dmarc_fail_status: true
          dmarc_none_status: true
          dmarc_pass_status: true
          dmarc_status : true
          dmarc_temp_error_status : true
        body_format: json
        validate_certs: no
        return_content: yes
        status_code: 200
      when: operation == "update"

    - name: Associate Antispam Profile to Recipient Policy
      uri:
        url: "{{ fortimail_host }}/api/v1/domain/{{ domain }}/PolicyRecipient/{{ recipient_policy_id }}"
        method: PUT
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          antispam: "{{ antispam_profile_name }}"
        status_code: 200
      when: operation == "associate"

    - name: Dissociate Antispam Profile from Recipient Policy
      uri:
        url: "{{ fortimail_host }}/api/v1/domain/{{ domain }}/PolicyRecipient/{{ recipient_policy_id }}"
        method: PUT
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          antispam: ""
        status_code: 200
      when: operation == "dissociate"

    - name: Delete Antispam Profile
      uri:
        url: "{{ fortimail_host }}/api/v1/domain/{{ domain }}/ProfAntispam/{{ antispam_profile_name }}"
        method: DELETE
        headers:
          Authorization: "Bearer {{ api_token }}"
        status_code: 200
      when: operation == "delete"
